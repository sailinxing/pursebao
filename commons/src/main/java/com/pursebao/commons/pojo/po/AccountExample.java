package com.pursebao.commons.pojo.po;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class AccountExample implements Serializable {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table account
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table account
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table account
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account
     *
     * @mbggenerated
     */
    public AccountExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table account
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table account
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria implements Serializable {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andAidIsNull() {
            addCriterion("aid is null");
            return (Criteria) this;
        }

        public Criteria andAidIsNotNull() {
            addCriterion("aid is not null");
            return (Criteria) this;
        }

        public Criteria andAidEqualTo(String value) {
            addCriterion("aid =", value, "aid");
            return (Criteria) this;
        }

        public Criteria andAidNotEqualTo(String value) {
            addCriterion("aid <>", value, "aid");
            return (Criteria) this;
        }

        public Criteria andAidGreaterThan(String value) {
            addCriterion("aid >", value, "aid");
            return (Criteria) this;
        }

        public Criteria andAidGreaterThanOrEqualTo(String value) {
            addCriterion("aid >=", value, "aid");
            return (Criteria) this;
        }

        public Criteria andAidLessThan(String value) {
            addCriterion("aid <", value, "aid");
            return (Criteria) this;
        }

        public Criteria andAidLessThanOrEqualTo(String value) {
            addCriterion("aid <=", value, "aid");
            return (Criteria) this;
        }

        public Criteria andAidLike(String value) {
            addCriterion("aid like", value, "aid");
            return (Criteria) this;
        }

        public Criteria andAidNotLike(String value) {
            addCriterion("aid not like", value, "aid");
            return (Criteria) this;
        }

        public Criteria andAidIn(List<String> values) {
            addCriterion("aid in", values, "aid");
            return (Criteria) this;
        }

        public Criteria andAidNotIn(List<String> values) {
            addCriterion("aid not in", values, "aid");
            return (Criteria) this;
        }

        public Criteria andAidBetween(String value1, String value2) {
            addCriterion("aid between", value1, value2, "aid");
            return (Criteria) this;
        }

        public Criteria andAidNotBetween(String value1, String value2) {
            addCriterion("aid not between", value1, value2, "aid");
            return (Criteria) this;
        }

        public Criteria andAccountAmountIsNull() {
            addCriterion("account_amount is null");
            return (Criteria) this;
        }

        public Criteria andAccountAmountIsNotNull() {
            addCriterion("account_amount is not null");
            return (Criteria) this;
        }

        public Criteria andAccountAmountEqualTo(Double value) {
            addCriterion("account_amount =", value, "accountAmount");
            return (Criteria) this;
        }

        public Criteria andAccountAmountNotEqualTo(Double value) {
            addCriterion("account_amount <>", value, "accountAmount");
            return (Criteria) this;
        }

        public Criteria andAccountAmountGreaterThan(Double value) {
            addCriterion("account_amount >", value, "accountAmount");
            return (Criteria) this;
        }

        public Criteria andAccountAmountGreaterThanOrEqualTo(Double value) {
            addCriterion("account_amount >=", value, "accountAmount");
            return (Criteria) this;
        }

        public Criteria andAccountAmountLessThan(Double value) {
            addCriterion("account_amount <", value, "accountAmount");
            return (Criteria) this;
        }

        public Criteria andAccountAmountLessThanOrEqualTo(Double value) {
            addCriterion("account_amount <=", value, "accountAmount");
            return (Criteria) this;
        }

        public Criteria andAccountAmountIn(List<Double> values) {
            addCriterion("account_amount in", values, "accountAmount");
            return (Criteria) this;
        }

        public Criteria andAccountAmountNotIn(List<Double> values) {
            addCriterion("account_amount not in", values, "accountAmount");
            return (Criteria) this;
        }

        public Criteria andAccountAmountBetween(Double value1, Double value2) {
            addCriterion("account_amount between", value1, value2, "accountAmount");
            return (Criteria) this;
        }

        public Criteria andAccountAmountNotBetween(Double value1, Double value2) {
            addCriterion("account_amount not between", value1, value2, "accountAmount");
            return (Criteria) this;
        }

        public Criteria andExpectedCapitalIsNull() {
            addCriterion("expected_capital is null");
            return (Criteria) this;
        }

        public Criteria andExpectedCapitalIsNotNull() {
            addCriterion("expected_capital is not null");
            return (Criteria) this;
        }

        public Criteria andExpectedCapitalEqualTo(Double value) {
            addCriterion("expected_capital =", value, "expectedCapital");
            return (Criteria) this;
        }

        public Criteria andExpectedCapitalNotEqualTo(Double value) {
            addCriterion("expected_capital <>", value, "expectedCapital");
            return (Criteria) this;
        }

        public Criteria andExpectedCapitalGreaterThan(Double value) {
            addCriterion("expected_capital >", value, "expectedCapital");
            return (Criteria) this;
        }

        public Criteria andExpectedCapitalGreaterThanOrEqualTo(Double value) {
            addCriterion("expected_capital >=", value, "expectedCapital");
            return (Criteria) this;
        }

        public Criteria andExpectedCapitalLessThan(Double value) {
            addCriterion("expected_capital <", value, "expectedCapital");
            return (Criteria) this;
        }

        public Criteria andExpectedCapitalLessThanOrEqualTo(Double value) {
            addCriterion("expected_capital <=", value, "expectedCapital");
            return (Criteria) this;
        }

        public Criteria andExpectedCapitalIn(List<Double> values) {
            addCriterion("expected_capital in", values, "expectedCapital");
            return (Criteria) this;
        }

        public Criteria andExpectedCapitalNotIn(List<Double> values) {
            addCriterion("expected_capital not in", values, "expectedCapital");
            return (Criteria) this;
        }

        public Criteria andExpectedCapitalBetween(Double value1, Double value2) {
            addCriterion("expected_capital between", value1, value2, "expectedCapital");
            return (Criteria) this;
        }

        public Criteria andExpectedCapitalNotBetween(Double value1, Double value2) {
            addCriterion("expected_capital not between", value1, value2, "expectedCapital");
            return (Criteria) this;
        }

        public Criteria andExpectedTotalincreaseIsNull() {
            addCriterion("expected_totalincrease is null");
            return (Criteria) this;
        }

        public Criteria andExpectedTotalincreaseIsNotNull() {
            addCriterion("expected_totalincrease is not null");
            return (Criteria) this;
        }

        public Criteria andExpectedTotalincreaseEqualTo(Double value) {
            addCriterion("expected_totalincrease =", value, "expectedTotalincrease");
            return (Criteria) this;
        }

        public Criteria andExpectedTotalincreaseNotEqualTo(Double value) {
            addCriterion("expected_totalincrease <>", value, "expectedTotalincrease");
            return (Criteria) this;
        }

        public Criteria andExpectedTotalincreaseGreaterThan(Double value) {
            addCriterion("expected_totalincrease >", value, "expectedTotalincrease");
            return (Criteria) this;
        }

        public Criteria andExpectedTotalincreaseGreaterThanOrEqualTo(Double value) {
            addCriterion("expected_totalincrease >=", value, "expectedTotalincrease");
            return (Criteria) this;
        }

        public Criteria andExpectedTotalincreaseLessThan(Double value) {
            addCriterion("expected_totalincrease <", value, "expectedTotalincrease");
            return (Criteria) this;
        }

        public Criteria andExpectedTotalincreaseLessThanOrEqualTo(Double value) {
            addCriterion("expected_totalincrease <=", value, "expectedTotalincrease");
            return (Criteria) this;
        }

        public Criteria andExpectedTotalincreaseIn(List<Double> values) {
            addCriterion("expected_totalincrease in", values, "expectedTotalincrease");
            return (Criteria) this;
        }

        public Criteria andExpectedTotalincreaseNotIn(List<Double> values) {
            addCriterion("expected_totalincrease not in", values, "expectedTotalincrease");
            return (Criteria) this;
        }

        public Criteria andExpectedTotalincreaseBetween(Double value1, Double value2) {
            addCriterion("expected_totalincrease between", value1, value2, "expectedTotalincrease");
            return (Criteria) this;
        }

        public Criteria andExpectedTotalincreaseNotBetween(Double value1, Double value2) {
            addCriterion("expected_totalincrease not between", value1, value2, "expectedTotalincrease");
            return (Criteria) this;
        }

        public Criteria andCashAmountIsNull() {
            addCriterion("cash_amount is null");
            return (Criteria) this;
        }

        public Criteria andCashAmountIsNotNull() {
            addCriterion("cash_amount is not null");
            return (Criteria) this;
        }

        public Criteria andCashAmountEqualTo(Double value) {
            addCriterion("cash_amount =", value, "cashAmount");
            return (Criteria) this;
        }

        public Criteria andCashAmountNotEqualTo(Double value) {
            addCriterion("cash_amount <>", value, "cashAmount");
            return (Criteria) this;
        }

        public Criteria andCashAmountGreaterThan(Double value) {
            addCriterion("cash_amount >", value, "cashAmount");
            return (Criteria) this;
        }

        public Criteria andCashAmountGreaterThanOrEqualTo(Double value) {
            addCriterion("cash_amount >=", value, "cashAmount");
            return (Criteria) this;
        }

        public Criteria andCashAmountLessThan(Double value) {
            addCriterion("cash_amount <", value, "cashAmount");
            return (Criteria) this;
        }

        public Criteria andCashAmountLessThanOrEqualTo(Double value) {
            addCriterion("cash_amount <=", value, "cashAmount");
            return (Criteria) this;
        }

        public Criteria andCashAmountIn(List<Double> values) {
            addCriterion("cash_amount in", values, "cashAmount");
            return (Criteria) this;
        }

        public Criteria andCashAmountNotIn(List<Double> values) {
            addCriterion("cash_amount not in", values, "cashAmount");
            return (Criteria) this;
        }

        public Criteria andCashAmountBetween(Double value1, Double value2) {
            addCriterion("cash_amount between", value1, value2, "cashAmount");
            return (Criteria) this;
        }

        public Criteria andCashAmountNotBetween(Double value1, Double value2) {
            addCriterion("cash_amount not between", value1, value2, "cashAmount");
            return (Criteria) this;
        }

        public Criteria andDailyTotalincreaseIsNull() {
            addCriterion("daily_totalincrease is null");
            return (Criteria) this;
        }

        public Criteria andDailyTotalincreaseIsNotNull() {
            addCriterion("daily_totalincrease is not null");
            return (Criteria) this;
        }

        public Criteria andDailyTotalincreaseEqualTo(Double value) {
            addCriterion("daily_totalincrease =", value, "dailyTotalincrease");
            return (Criteria) this;
        }

        public Criteria andDailyTotalincreaseNotEqualTo(Double value) {
            addCriterion("daily_totalincrease <>", value, "dailyTotalincrease");
            return (Criteria) this;
        }

        public Criteria andDailyTotalincreaseGreaterThan(Double value) {
            addCriterion("daily_totalincrease >", value, "dailyTotalincrease");
            return (Criteria) this;
        }

        public Criteria andDailyTotalincreaseGreaterThanOrEqualTo(Double value) {
            addCriterion("daily_totalincrease >=", value, "dailyTotalincrease");
            return (Criteria) this;
        }

        public Criteria andDailyTotalincreaseLessThan(Double value) {
            addCriterion("daily_totalincrease <", value, "dailyTotalincrease");
            return (Criteria) this;
        }

        public Criteria andDailyTotalincreaseLessThanOrEqualTo(Double value) {
            addCriterion("daily_totalincrease <=", value, "dailyTotalincrease");
            return (Criteria) this;
        }

        public Criteria andDailyTotalincreaseIn(List<Double> values) {
            addCriterion("daily_totalincrease in", values, "dailyTotalincrease");
            return (Criteria) this;
        }

        public Criteria andDailyTotalincreaseNotIn(List<Double> values) {
            addCriterion("daily_totalincrease not in", values, "dailyTotalincrease");
            return (Criteria) this;
        }

        public Criteria andDailyTotalincreaseBetween(Double value1, Double value2) {
            addCriterion("daily_totalincrease between", value1, value2, "dailyTotalincrease");
            return (Criteria) this;
        }

        public Criteria andDailyTotalincreaseNotBetween(Double value1, Double value2) {
            addCriterion("daily_totalincrease not between", value1, value2, "dailyTotalincrease");
            return (Criteria) this;
        }

        public Criteria andTotalincreasementIsNull() {
            addCriterion("totalincreasement is null");
            return (Criteria) this;
        }

        public Criteria andTotalincreasementIsNotNull() {
            addCriterion("totalincreasement is not null");
            return (Criteria) this;
        }

        public Criteria andTotalincreasementEqualTo(Double value) {
            addCriterion("totalincreasement =", value, "totalincreasement");
            return (Criteria) this;
        }

        public Criteria andTotalincreasementNotEqualTo(Double value) {
            addCriterion("totalincreasement <>", value, "totalincreasement");
            return (Criteria) this;
        }

        public Criteria andTotalincreasementGreaterThan(Double value) {
            addCriterion("totalincreasement >", value, "totalincreasement");
            return (Criteria) this;
        }

        public Criteria andTotalincreasementGreaterThanOrEqualTo(Double value) {
            addCriterion("totalincreasement >=", value, "totalincreasement");
            return (Criteria) this;
        }

        public Criteria andTotalincreasementLessThan(Double value) {
            addCriterion("totalincreasement <", value, "totalincreasement");
            return (Criteria) this;
        }

        public Criteria andTotalincreasementLessThanOrEqualTo(Double value) {
            addCriterion("totalincreasement <=", value, "totalincreasement");
            return (Criteria) this;
        }

        public Criteria andTotalincreasementIn(List<Double> values) {
            addCriterion("totalincreasement in", values, "totalincreasement");
            return (Criteria) this;
        }

        public Criteria andTotalincreasementNotIn(List<Double> values) {
            addCriterion("totalincreasement not in", values, "totalincreasement");
            return (Criteria) this;
        }

        public Criteria andTotalincreasementBetween(Double value1, Double value2) {
            addCriterion("totalincreasement between", value1, value2, "totalincreasement");
            return (Criteria) this;
        }

        public Criteria andTotalincreasementNotBetween(Double value1, Double value2) {
            addCriterion("totalincreasement not between", value1, value2, "totalincreasement");
            return (Criteria) this;
        }

        public Criteria andCurrentTotalIncreaseIsNull() {
            addCriterion("current_total_increase is null");
            return (Criteria) this;
        }

        public Criteria andCurrentTotalIncreaseIsNotNull() {
            addCriterion("current_total_increase is not null");
            return (Criteria) this;
        }

        public Criteria andCurrentTotalIncreaseEqualTo(Double value) {
            addCriterion("current_total_increase =", value, "currentTotalIncrease");
            return (Criteria) this;
        }

        public Criteria andCurrentTotalIncreaseNotEqualTo(Double value) {
            addCriterion("current_total_increase <>", value, "currentTotalIncrease");
            return (Criteria) this;
        }

        public Criteria andCurrentTotalIncreaseGreaterThan(Double value) {
            addCriterion("current_total_increase >", value, "currentTotalIncrease");
            return (Criteria) this;
        }

        public Criteria andCurrentTotalIncreaseGreaterThanOrEqualTo(Double value) {
            addCriterion("current_total_increase >=", value, "currentTotalIncrease");
            return (Criteria) this;
        }

        public Criteria andCurrentTotalIncreaseLessThan(Double value) {
            addCriterion("current_total_increase <", value, "currentTotalIncrease");
            return (Criteria) this;
        }

        public Criteria andCurrentTotalIncreaseLessThanOrEqualTo(Double value) {
            addCriterion("current_total_increase <=", value, "currentTotalIncrease");
            return (Criteria) this;
        }

        public Criteria andCurrentTotalIncreaseIn(List<Double> values) {
            addCriterion("current_total_increase in", values, "currentTotalIncrease");
            return (Criteria) this;
        }

        public Criteria andCurrentTotalIncreaseNotIn(List<Double> values) {
            addCriterion("current_total_increase not in", values, "currentTotalIncrease");
            return (Criteria) this;
        }

        public Criteria andCurrentTotalIncreaseBetween(Double value1, Double value2) {
            addCriterion("current_total_increase between", value1, value2, "currentTotalIncrease");
            return (Criteria) this;
        }

        public Criteria andCurrentTotalIncreaseNotBetween(Double value1, Double value2) {
            addCriterion("current_total_increase not between", value1, value2, "currentTotalIncrease");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table account
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria implements Serializable {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table account
     *
     * @mbggenerated
     */
    public static class Criterion implements Serializable {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}